from aiogram import Router, F
from aiogram.types import Message, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup

from bot.keyboards import get_action_keyboard, get_restart_keyboard
from bot.utils.caesar import caesar_cipher

import os

router = Router()

class CaesarStates(StatesGroup):
    choosing_action = State()
    entering_text = State()
    entering_shift = State()

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()

    photo_path = "images/caesar.jpg"
    if not os.path.exists(photo_path):
        await message.answer("‚ö†Ô∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª caesar.jpg –≤ –ø–∞–ø–∫—É images.")
        return

    photo = FSInputFile(photo_path)
    caption = (
        "üîê *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –®–∏—Ñ—Ä–∞ –¶–µ–∑–∞—Ä—è!*\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é –¥—Ä–µ–≤–Ω–µ–≥–æ —à–∏—Ñ—Ä–∞.\n\n"
        "üìå *–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?*\n"
        "‚Äî –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ: –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å.\n"
        "‚Äî –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç.\n"
        "‚Äî –£–∫–∞–∂–∏ —Å–¥–≤–∏–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3).\n\n"
        "–ì–æ—Ç–æ–≤? –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!"
    )

    await message.answer_photo(
        photo=photo,
        caption=caption,
        reply_markup=get_action_keyboard(),
        parse_mode="Markdown"
    )
    await state.set_state(CaesarStates.choosing_action)


@router.message(CaesarStates.choosing_action, F.text.in_({"üîê –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å", "üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å"}))
async def choose_action(message: Message, state: FSMContext):
    mode = 'encrypt' if message.text == "üîê –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å" else 'decrypt'
    await state.update_data(mode=mode)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:", reply_markup=None)
    await state.set_state(CaesarStates.entering_text)


@router.message(CaesarStates.entering_text)
async def enter_text(message: Message, state: FSMContext):
    await state.update_data(text=message.text)
    await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ —Å–¥–≤–∏–≥ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 3 –∏–ª–∏ -5):")
    await state.set_state(CaesarStates.entering_shift)


@router.message(CaesarStates.entering_shift)
async def enter_shift(message: Message, state: FSMContext):
    try:
        shift = int(message.text)
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Å–¥–≤–∏–≥–∞.")
        return

    data = await state.get_data()
    text = data['text']
    mode = data['mode']

    try:
        result = caesar_cipher(text, shift, mode)
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        return

    action = "üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π" if mode == 'encrypt' else "üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π"
    await message.answer(f"{action} —Ç–µ–∫—Å—Ç:\n\n`{result}`", parse_mode="Markdown")
    await message.answer("–•–æ—á–µ—à—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å/—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –µ—â—ë?", reply_markup=get_restart_keyboard())
    await state.clear()


@router.message(F.text == "üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
async def restart(message: Message, state: FSMContext):
    await cmd_start(message, state)
